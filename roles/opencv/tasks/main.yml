---
- name: Install developer and compile tools
  become: true
  apt: name={{ item }} state=present
  with_items:
  - build-essential
  - cmake
  - git
  - pkg-config

- name: Install libraries for various image formats
  become: true
  apt: name={{ item }} state=present
  with_items:
  - libjpeg8-dev
  - libtiff5-dev
  - libjasper-dev
  - libpng12-dev

- name: Install libraries for various video formats
  become: true
  apt: name={{ item }} state=present
  with_items:
  - libavcodec-dev
  - libavformat-dev
  - libswscale-dev
  - libv4l-dev

- name: Install GTK for OpenCV GUI
  become: true
  apt: name=libgtk-3-dev state=present

- name: Install packages used for optimization in OpenCV
  become: true
  apt: name={{ item }}
  with_items:
  - libatlas-base-dev
  - gfortran

- name: Install Python3 headers and development files
  become: true
  apt: name=python3.5-dev

- name: Install unzip
  become: true
  apt: name=unzip

- name: Check if temporary directory already exists
  stat: path={{ download_dir }}
  register: tmp

- name: Create temporary download directory
  file: name={{ download_dir }} state=directory
  when: tmp.stat.exists == false

- name: Download and unzip opencv
  unarchive: src=https://github.com/opencv/opencv/archive/{{ opencv_version }}.zip dest={{ download_dir }} remote_src=yes

- name: Download and unzip opencv_contrib
  unarchive: src=https://github.com/opencv/opencv_contrib/archive/{{ opencv_version }}.zip dest={{ download_dir }} remote_src=yes

- name: Create build directory
  file: name={{ download_dir }}/opencv-{{ opencv_version }}/build state=directory

- name: Make the opencv build artifacts
  shell: |
    source /usr/local/bin/virtualenvwrapper.sh
    workon {{ virtualenv_name }}
    cmake -D CMAKE_BUILD_TYPE=RELEASE -D CMAKE_INSTALL_PREFIX=/usr/local -D INSTALL_C_EXAMPLES=OFF -D INSTALL_PYTHON_EXAMPLES=ON -D OPENCV_EXTRA_MODULES_PATH={{ download_dir }}/opencv_contrib-{{ opencv_version }}/modules -D BUILD_EXAMPLES=ON ..
  args:
    chdir: "{{ download_dir }}/opencv-{{ opencv_version }}/build"
    executable: /bin/bash
  # TODO: THIS STEP NEEDS TO HAVE LOGIC TO PREVENT FROM RUNNING IF ALREADY RUN
  # creates: "{{ download_dir }}/opencv-{{ opencv_version }}/modules/CMakeLists.txt"

- name: Compile opencv
  shell: |
    source /usr/local/bin/virtualenvwrapper.sh
    workon {{ virtualenv_name }}
    make -j{{ num_processors }}
  args:
    chdir: "{{ download_dir }}/opencv-{{ opencv_version }}/build"
    executable: /bin/bash
  # TODO: THIS STEP NEEDS TO HAVE LOGIC TO PREVENT FROM RUNNING IF ALREADY RUN
  # creates: "{{ download_dir }}/opencv-{{ opencv_version }}/data/haarcascades/*.xml"

- name: Get full path of download directory ("~" varies by user)
  shell: pwd
  args:
    chdir: "{{ download_dir }}"
  register: pwd_result

- name: Install opencv
  become: true
  shell: |
    source /usr/local/bin/virtualenvwrapper.sh
    workon {{ virtualenv_name }}
    make install
    ldconfig
  args:
    chdir: "{{ pwd_result.stdout }}/opencv-{{ opencv_version }}/build"
    executable: /bin/bash

- name: Remove temporary download directory, if it didn't previously exist
  file: name={{ download_dir }} state=absent
  when: tmp.stat.exists == false

- name: Find opencv .so file in python site-packages directory
  find:
    paths: "/usr/local/lib/python3.5/site-packages/"
    patterns: "cv2*so"
    file_type: file
  register: cv_so_match

- name: Symlink opencv to virtualenv
  file: 
    path: "{{ virtualenv_home }}/{{ virtualenv_name }}/lib/python3.5/site-packages/cv2.so"
    src: "{{ cv_so_match.files[0].path }}"
    state: link 
